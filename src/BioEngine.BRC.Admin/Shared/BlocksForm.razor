@using BioEngine.BRC.Common.Entities.Abstractions
@using BioEngine.BRC.Common.Entities
@using System.Collections.ObjectModel
@using BioEngine.BRC.Common.Components
@inject IJSRuntime JsRuntime

<div class="blocksForm" id="blocks-@Item.Id">
    @foreach (var block in Blocks)
    {
        <RadzenCard class="@GetBlockClass(block)">
            <RadzenIcon Icon="drag_indicator" dragHandle></RadzenIcon>
            <RadzenIcon Icon="delete" delete @onclick="@(async () => await DeleteBlockAsync(block))"></RadzenIcon>
            <RadzenIcon Icon="@block.TypeIcon" blockIcon></RadzenIcon>
            <BlockForm Block="block"></BlockForm>
        </RadzenCard>
    }
</div>

@code {

    [Parameter]
    public IContentItem Item { get; set; }

    private ObservableCollection<ContentBlock> Blocks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Blocks = new ObservableCollection<ContentBlock>(Item.Blocks.OrderBy(b => b.Position));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            InitSortable();
        }
    }

    void InitSortable()
    {
        var arg = new
        {
            id = $"blocks-{Item.Id}",
            element = ".rz-card",
            handle = "[dragHandle]",
            instance = DotNetObjectReference.Create(this)
        };
        JsRuntime.InvokeAsync<string>(
            "BlazorSortable",
            arg);
    }

    [JSInvokable]
    public async Task<bool> updateIndex(int newIndex, int oldIndex)
    {
        Blocks.Move(oldIndex, newIndex);
        foreach (var block in Blocks)
        {
            block.Position = Blocks.IndexOf(block);
        }
        return true;
    }

    private async Task DeleteBlockAsync(ContentBlock block)
    {
        Item.Blocks.Remove(block);
        Blocks.Remove(block);
    }

    private string GetBlockClass(ContentBlock block)
    {
        return $"block-form block-{block.GetKey()}";
    }

}
